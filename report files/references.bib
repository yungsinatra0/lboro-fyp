@online{mdpop,
    author = {{National Bureau of Statistics of the Republic of Moldova}},
    year = "2024",
    title = "Population",
    url = "https://statistica.gov.md/en/statistic_indicator_details/25",
    addendum = "(Accessed: 22 Oct 2024)"
}

@online{mdpoverty,
    author = "BBC",
    year = "2024",
    title = "Moldova country profile",
    url = "https://www.bbc.co.uk/news/world-europe-17601580",
    addendum = "(Accessed: 22 Oct 2024)"
}

@online{mdega,
    author = {{E-Governance Agency}},
    title = "About EGA",
    URL = "https://egov.md/en/about-ega",
    addendum = "(Accessed: 22 Oct 2024)"
}

@online{mdcabinet,
    author = {{E-Governance Agency}},
    title = "Citizen's Government Portal",
    URL = "https://egov.md/en/content/citizens-government-portal",
    addendum = "(Accessed: 22 Oct 2024)"
}

@online{mdehr,
    author = "Aliona Ciurcă",
    title = "Sistemul informațional automatizat din spitale: cum funcționează în R. Moldova și ce cred medicii că ar trebui ajustat",
    year = "2021", 
    URL = "https://www.zdg.md/stiri/stiri-sociale/sistemul-informational-automatizat-din-spitale-cum-functioneaza-in-r-moldova-si-ce-cred-medicii-ca-ar-trebui-ajustat/",
    addendum = "(Accessed: 22 Oct 2024)"
}

@online{mdstrategy,
    author = {{United Nations Development Programme}},
    title = "A 100\% digital state: The strategy for digital transformation of the Republic of Moldova for 2023-2030, approved by the Executive",
    year = "2023",
    URL = "https://www.undp.org/moldova/press-releases/100-digital-state-strategy-digital-transformation-republic-moldova-2023-2030-approved-executive",
    addendum = "(Accessed: 22 Oct 2024)"
    }

@online{mduni,
    author = {{USMF}},
    title = "Brief history",
    year = "2023",
    URL = "https://usmf.md/en/brief-history-usmf",
    addendum = "(Accessed: 22 Oct 2024)"
}

@article{sdlc1,
author = {Ruparelia, Nayan B.},
title = {Software development lifecycle models},
year = {2010},
issue_date = {May 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {35},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/1764810.1764814},
doi = {10.1145/1764810.1764814},
abstract = {This history column article provides a tour of the main software development life cycle (SDLC) models. (A lifecycle covers all the stages of software from its inception with requirements definition through to fielding and maintenance.) System development lifecycle models have drawn heavily on software and so the two terms can be used interchangeably in terms of SDLC, especially since software development in this respect encompasses software systems development. Because the merits of selecting and using an SDLC vary according to the environment in which software is developed as well as its application, I discuss three broad categories for consideration when analyzing the relative merits of SDLC models. I consider the waterfall model before the other models because it has had a profound effect on software development, and has additionally influenced many SDLC models prevalent today. Thereafter, I consider some of the mainstream models and finish with a discussion of what the future could hold for SDLC models.},
journal = {SIGSOFT Softw. Eng. Notes},
month = may,
pages = {8–13},
numpages = {6},
keywords = {wheel-and-spoke, waterfall, unified, spiral, incremental, Vmodel, SEN history column, SDLC, RAD, B-model}
}

  
@article{sdlc2, 
title={A Comprehensive Review of Software Development Life Cycle methodologies: Pros, Cons, and Future Directions },
author={Qahtan Yas and Abdulbasit Alazzawi and Bahbibi Rahmatullah}, 
volume={4}, 
url={https://journal.esj.edu.iq/index.php/IJCM/article/view/664}, 
DOI={10.52866/ ijcsm.2023.04.04.014}, 
abstract={The software development process needs specific and studied steps within a reliable plan to achieve the requirements for the success of any project.Software development life cycle (SDLC) methodologies have provided several models that meet the needs of the various proposed projects. These methodologies present various scenarios that can be applied in the process of developing systems to make them more efficient and predictive. The paper aims to illuminate the paramount Software Development Life Cycle (SDLC) methodologies by conducting a comprehensive review of the pros and cons of the various models widely used for software design. Furthermore, the paper discusses fundamental trajectories that are shaping the future landscape of SDLC methodologies. This review included two main types of software development life cycle approaches such as traditional SDLC (heavy-weight) and agile SDLC (light-weight) approaches. The traditional approach included several models such as the Waterfall model, Iterative model, Spiral model, V-Model, and Big Bang Model. Whereas, the agile approach included various models such as the eXtreme Programming (XP) Model, scrum Model, Feature Driven Development (FDD) Model, and Kanban Model. A comprehensive analytical study of all software development life cycle models was achieved and highlighted their most prominent strengths and weaknesses of them. SDLC methodologies wield substantial ramifications across a multitude of sectors, contingent upon several models tailored to individual developmental and research contexts. In culmination, the paper furnishes an all-encompassing perspective on paramount SDLC models, encompassing two principal paradigms: the traditional and the agile approaches. These encompass fundamental sub-models that encapsulate pioneering models poised for application in system development, thus facilitating their refinement more efficiently and predictably.}, 
number={4}, 
journal={Iraqi Journal For Computer Science and Mathematics},  
year={2023}, 
month=Nov, 
pages={173–190} 
}

@article{testing,
  title={Software testing techniques},
  author={Luo, Lu},
  journal={Institute for software research international Carnegie mellon university Pittsburgh, PA},
  volume={15232},
  number={1-19},
  pages={19},
  year={2001}
}

@article{waterfall,
  title={A comparison between three SDLC models waterfall model, spiral model, and Incremental/Iterative model},
  author={Alshamrani, Adel and Bahattab, Abdullah},
  journal={International Journal of Computer Science Issues (IJCSI)},
  volume={12},
  number={1},
  pages={106},
  year={2015}
}

@article{agile,
  author={Sunner, Daminderjit},
  booktitle={2016 2nd International Conference on Applied and Theoretical Computing and Communication Technology (iCATccT)}, 
  title={Agile: Adapting to need of the hour: Understanding Agile methodology and Agile techniques}, 
  year={2016},
  volume={},
  number={},
  pages={130-135},
  keywords={Software;Crystals;Programming;Testing;Documentation;Planning;Organizations;Agile;Agile methods;Agile techniques},
  doi={10.1109/ICATCCT.2016.7911978}
  }

  @online{agile2,
    author = "Ward Cunningham",
    title = "Manifesto for Agile Software Development",
    year = "2001",
    URL = "https://agilemanifesto.org/",
    addendum = "(Accessed: 25 Oct 2024)"
  }

@article{scrumban,
  title={An empirical study of Scrumban formation based on the selection of scrum and Kanban practices},
  author={Alqudah, Mashal and Razali, Rozilawati},
  journal={Int. J. Adv. Sci. Eng. Inf. Technol},
  volume={8},
  number={6},
  pages={2315--2322},
  year={2018}
}

@article{hybrid1,
author = {Andrew Gemino and Blaize Horner Reich and Pedro M. Serrador},
title ={Agile, Traditional, and Hybrid Approaches to Project Success: Is Hybrid a Poor Second Choice?},
journal = {Project Management Journal},
volume = {52},
number = {2},
pages = {161-175},
year = {2021},
doi = {10.1177/8756972820973082},
URL = {https://doi.org/10.1177/8756972820973082},
eprint = {https://doi.org/10.1177/8756972820973082},
abstract = {Three project management approaches—traditional, agile, and hybrid—were considered in this study. Results from an international study, including 477 cross-industry projects, indicated that 52\% of projects could be categorized as hybrid approaches. A regression analysis using multiple outcome measures indicated substantial explanatory power (0.21 < R 2 <0.41). Analysis suggested that hybrid and agile approaches significantly increase stakeholder success over traditional approaches while achieving the same budget, time, scope, and quality outcomes. Hybrid approaches were found to be similar in effectiveness to fully agile approaches. Results validate decisions by practitioners to combine agile and traditional practices and suggest that hybrid is a leading project management approach.}
}

@inproceedings{hybrid2,
title={How are hybrid development approaches organized? A systematic literature review},
author={Prenner, Nils and Unger-Windeler, Carolin and Schneider, Kurt},
booktitle={Proceedings of the International Conference on Software and System Processes},
pages={145--154},
year={2020}
}

@online{atlassian,
    author = "Andreas Springer",
    title = "What is Jira Software, and why use it?",
    year = "2023",
    URL = "https://community.atlassian.com/t5/Jira-articles/What-is-Jira-Software-and-why-use-it/ba-p/2323812",
    addendum = "(Accessed: 26 Oct 2024)"
}

@online{databases,
    author = {Benjamin Anderson and Brad Nicholson},
    title = {SQL vs. NoSQL Databases: What’s the difference?},
    year = {2022},
    URL = "https://www.ibm.com/think/topics/sql-vs-nosql",
    addendum = "(Accessed: 28 Oct 2024)"
}

@online{databases2,
    author = "Oracle",
    title = "What is a Database?",
    year = "2020",
    URL = "https://www.oracle.com/uk/database/what-is-database/",
    addendum = "(Accessed: 28 Oct 2024)"
}

@INPROCEEDINGS{reqanalysis1,
  author={Hickey, A.M. and Davis, A.M.},
  booktitle={Proceedings. 11th IEEE International Requirements Engineering Conference, 2003.}, 
  title={Elicitation technique selection: how do experts do it?}, 
  year={2003},
  volume={},
  number={},
  pages={169-178},
  keywords={Performance analysis;Failure analysis;Assembly;Books;Information systems;Springs;Information analysis;Computer industry;Availability;Technology transfer},
  doi={10.1109/ICRE.2003.1232748}
}

@article{reqanalysis2,
  title={Recommended requirements gathering practices},
  author={Young, Ralph R},
  journal={CrossTalk},
  volume={15},
  number={4},
  pages={9--12},
  year={2002},
  publisher={Citeseer}
}

@article{reqanalysis3,
  title={Revisiting requirements elicitation techniques},
  author={Sharma, Shreta and Pandey, SK},
  journal={International Journal of Computer Applications},
  volume={75},
  number={12},
  year={2013},
  publisher={Citeseer}
}

@INPROCEEDINGS{reqanalysis4,
  author={Tiwari, Saurabh and Rathore, Santosh Singh and Gupta, Atul},
  booktitle={2012 CSI Sixth International Conference on Software Engineering (CONSEG)}, 
  title={Selecting requirement elicitation techniques for software projects}, 
  year={2012},
  volume={},
  number={},
  pages={1-10},
  keywords={Interviews;Software systems;Context;Sorting;Analytical models;Collaboration;Requirement elicitation;Elicitation techniques;Elic-itation technique selection;Evaluation Framework},
  doi={10.1109/CONSEG.2012.6349486}
}

@INPROCEEDINGS{reqanalysis5,
  author={Davis, Alan and Dieste, Oscar and Hickey, Ann and Juristo, Natalia and Moreno, Ana M.},
  booktitle={14th IEEE International Requirements Engineering Conference (RE'06)}, 
  title={Effectiveness of Requirements Elicitation Techniques: Empirical Results Derived from a Systematic Review}, 
  year={2006},
  volume={},
  number={},
  pages={179-188},
  keywords={Systematic review;software engineering;elicitation techniques;empirical studies},
  doi={10.1109/RE.2006.17}
}

@article{reqanalysis6,
author = {Saeeda, Hina and Dong, Junyu and Wang, Yong and Abid, Muhammmad Adil},
title = {A proposed framework for improved software requirements elicitation process in SCRUM: Implementation by a real-life Norway-based IT project},
journal = {Journal of Software: Evolution and Process},
volume = {32},
number = {7},
pages = {e2247},
keywords = {agile software engineering, joint requirements development, mind mapping, SCRUM, software requirement engineering},
doi = {https://doi.org/10.1002/smr.2247},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2247},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.2247},
note = {e2247 JSME-19-0129.R1},
abstract = {Abstract Software requirement engineering (SRE) is the initial stage of the software engineering process and entails several challenges relating to the identification, implementation, evolution, and management of requirements for the development of software systems that meet the desired functionality quality standards. Agile software development (ASD) is a well-known software development process that follows a lightweight and adaptive methodology to support the incremental development of software systems. Since the ASD follows an adaptive procedure (ie, a flexible, nanostructured, and dynamic approach) of software development, it becomes challenging to perform SRE that follows a structured approach for managing software requirements throughout the life cycle of software development. The primary challenges for SRE, while pursuing an ASD, include, but are not limited to, identification of incomplete requirements, implementation of vague requirements, prioritization of secondary functional requirements, and compromise on users' involvement that negatively impacts the software system's functionality and quality. To overcome these challenges, some of the recent research efforts have focused on managing different phases of SRE during software development using the ASD. However, there is a lack of solutions that provide software engineers/practitioners with a solution. Besides, frameworks to effectively manage all the phases of SRE as per the needs of the ASD are needed. We propose a framework that unifies joint requirements document (JRD) and SCRUM to incrementally (a) identify, (b) implement, (c) evolve, and (d) manage system requirements throughout the software development cycle. We have used the action research method to qualitatively validate the proposed framework based on data and user requirements collected from a product-focused (multinational) Norway-based software company. The results of the validation are based on statistical analysis that reflects the usefulness of the proposed framework for SRE in ASD-based software engineering and development. Future research is the possible application of a machine learning approach (es) in the intended context for agile requirements elicitations.},
year = {2020}
}

@inproceedings{interviews1,
  title={Common mistakes of student analysts in requirements elicitation interviews},
  author={Donati, Beatrice and Ferrari, Alessio and Spoletini, Paola and Gnesi, Stefania},
  booktitle={Requirements Engineering: Foundation for Software Quality: 23rd International Working Conference, REFSQ 2017, Essen, Germany, February 27--March 2, 2017, Proceedings 23},
  pages={148--164},
  year={2017},
  organization={Springer}
}

@article{interviews2,
  title={Teaching requirements elicitation interviews: an empirical study of learning from mistakes},
  author={Bano, Muneera and Zowghi, Didar and Ferrari, Alessio and Spoletini, Paola and Donati, Beatrice},
  journal={Requirements Engineering},
  volume={24},
  pages={259--289},
  year={2019},
  publisher={Springer}
}

@article{interviews3,
  author = {Loweth, Robert P. and Daly, Shanna R. and Hortop, Amy and Strehl, Elizabeth A. and Sienko, Kathleen H.},
  title = "{A Comparative Analysis of Information Gathering Meetings Conducted by Novice Design Teams Across Multiple Design Project Stages}",
  journal = {Journal of Mechanical Design},
  volume = {143},
  number = {9},
  pages = {092301},
  year = {2021},
  month = {03},
  abstract = "{Designers often gather information, for instance through stakeholder or domain expert meetings, to understand their design problems and develop effective solutions. However, few previous studies have provided in-depth descriptions of novice engineering designers’ approaches to conducting information gathering meetings. In this preliminary study, we analyzed data from six capstone mechanical engineering design teams to identify the types of individuals from whom teams gathered information, when these meetings occurred, and how teams solicited information during meetings. Teams in our study exhibited a range of information gathering behaviors that aligned with recommended practices, particularly in their early meetings. We also observed relatively few instances of teams exhibiting behaviors that were less similar to recommended practices during their meetings. However, our findings revealed two key trends across teams that represented specific opportunities for improvement and that may reflect characteristic novice approaches to conducting information gathering meetings. First, teams explored domain experts’ perspectives in depth during meetings and met with additional domain experts to inform their projects. Teams' meetings with project partners contained few instances of deep exploratory information gathering behaviors in comparison. In addition, teams seemed to finalize design decisions during early design meetings and were less likely to conduct information gathering meetings during later design phases. The comprehensive descriptions of novice mechanical engineering designers’ approaches provided in our preliminary study provide an entry point for further investigations that can inform engineering training, tools, and pedagogy for conducting effective meetings.}",
  issn = {1050-0472},
  doi = {10.1115/1.4049970},
  url = {https://doi.org/10.1115/1.4049970},
  eprint = {https://asmedigitalcollection.asme.org/mechanicaldesign/article-pdf/143/9/092301/6667332/md\_143\_9\_092301.pdf},
}

@article{interviews4, 
  title={The use of recommended interviewing practices by novice engineering designers to elicit information during requirements development}, 
  volume={8}, 
  DOI={10.1017/dsj.2022.4}, 
  journal={Design Science}, 
  author={Mohedas, Ibrahim and Daly, Shanna R. and Loweth, Robert P. and Huynh, Linh and Cravens, Grace L. and Sienko, Kathleen H.}, 
  year={2022}, 
  pages={e16}
}

@INPROCEEDINGS{interviews5,
  author={Davis, Alan and Dieste, Oscar and Hickey, Ann and Juristo, Natalia and Moreno, Ana M.},
  booktitle={14th IEEE International Requirements Engineering Conference (RE'06)}, 
  title={Effectiveness of Requirements Elicitation Techniques: Empirical Results Derived from a Systematic Review}, 
  year={2006},
  volume={},
  number={},
  pages={179-188},
  keywords={Systematic review;software engineering;elicitation techniques;empirical studies},
  doi={10.1109/RE.2006.17}
}

@article{interviews6,
  author={Wahbeh, Abdullah and Sarnikar, Surendra and El-Gayar, Omar},
  title={A socio‑technical‑based process for questionnaire development in requirements elicitation via interviews},
  year={2020},
  journal={Requirements Engineering},
  volume={25},
  issue={3},
  pages = {295-315},
  doi={https://doi.org/10.1007/s00766-019-00324-x},
  month={09}
}

@book{requirements,
  title={Requirements engineering for software and systems},
  author={Laplante, Phillip A},
  year={2019},
  publisher={Auerbach Publications},
  edition = {3rd},
}

@ARTICLE{requirements2,
  author={},
  journal={ISO/IEC/IEEE 29148:2018(E)}, 
  title={ISO/IEC/IEEE International Standard - Systems and software engineering -- Life cycle processes -- Requirements engineering}, 
  year={2018},
  volume={},
  number={},
  pages={1-104},
  keywords={IEEE Standards;IEC Standards;ISO Standards;Software engineering;requirement;requirement characteristics;concept of operations;ConOps;operational concept;OpsCon;prototyping;software requirements specification;system;system requirements specification;SyRS},
  doi={10.1109/IEEESTD.2018.8559686}
  }

@online{stakeholders,
author = "Tam M.",
title = "Stakeholder Analysis | Definition and best method",
year = "2024",
URL =  "https://www.stakeholdermap.com/stakeholder-analysis.html",
addendum = "(Accessed: 31 Oct 2024)"
}

@online{backend,
auhtor = "Nimrod Kramer",
title = "Backend Frameworks List: 2024 Overview",
year = "2024",
URL = "https://daily.dev/blog/backend-frameworks-list-2024-overview",
addendum = "(Accessed: 02 Nov 2024)"
}

@online{pythonframwork,
title = "Django vs. Flask: Which Is the Best Python Web Framework?",
author = "Denis Mashutin",
year = "2024",
URL = "https://blog.jetbrains.com/pycharm/2023/11/django-vs-flask-which-is-the-best-python-web-framework/",
addendum = "(Accessed: 02 Nov 2024)"
}

@online{transformers,
author = "Hugging Face",
title = "Transformers",
URL = "https://huggingface.co/docs/transformers/index",
addendum = "(Accessed: 02 Nov 2024)"
}

@online{django,
author = "Django",
title = "Why Django?",
URL = "https://www.djangoproject.com/start/overview/",
addendum = "(Accessed: 02 Nov 2024)"
}

@article{moscow,
  title={Comparison of requirement prioritization techniques to find best prioritization technique},
  author={Khan, Javed Ali and Rehman, Izaz Ur and Khan, Yawar Hayat and Khan, Iftikhar Javed and Rashid, Salman},
  journal={International Journal of Modern Education and Computer Science},
  volume={7},
  number={11},
  pages={53},
  year={2015},
  publisher={Modern Education and Computer Science Press}
}

@online{uml,
author="Visual Paradigm",
title="What is Unified Modeling Language (UML)?",
URL="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-uml/#sequence-diagram",
year="2024",
addendum="(Accessed: 07 Nov 2024)"
}